# https://sw.kovidgoyal.net/kitty/conf.html 
# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

# font_family      monospace
# bold_font        auto
# italic_font      auto
# bold_italic_font auto

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. By default they are derived automatically, by the OSes
#: font system. Setting them manually is useful for font families that
#: have many weight variants like Book, Medium, Thick, etc. For
#: example::

#:     font_family      Operator Mono Book
#:     bold_font        Operator Mono Medium
#:     italic_font      Operator Mono Book Italic
#:     bold_italic_font Operator Mono Medium Italic

# font_size 11.0

#: Font size (in pts)

# adjust_line_height  0
# adjust_column_width 0

#: Change the size of each character cell kitty renders. You can use
#: either numbers, which are interpreted as pixels or percentages
#: (number followed by %), which are interpreted as percentages of the
#: unmodified values. You can use negative pixels or percentages less
#: than 100% to reduce sizes (but this might cause rendering
#: artifacts).

# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols

#: Map the specified unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each unicode code
#: point is specified in the form U+<code point in hexadecimal>. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. symbol_map itself can be specified multiple
#: times. Syntax is::

#:     symbol_map codepoints Font Family Name

# box_drawing_scale 0.001, 1, 1.5, 2

#: Change the sizes of the lines used for the box drawing unicode
#: characters These values are in pts. They will be scaled by the
#: monitor DPI to arrive at a pixel value. There must be four values
#: corresponding to thin, normal, thick, and very thick lines.

#: }}}

#: Cursor customization {{{

# cursor #cccccc

#: Default cursor color

# cursor_text_color #111111

#: choose the color of text under the cursor. if you want it rendered
#: with the background color of the cell underneath instead, use the
#: special keyword: background

# cursor_shape block

#: the cursor shape can be one of (block, beam, underline)

# cursor_blink_interval      0.5
# cursor_stop_blinking_after 15.0

#: the interval (in seconds) at which to blink the cursor. set to zero
#: to disable blinking. note that numbers smaller than repaint_delay
#: will be limited to repaint_delay. stop blinking cursor after the
#: specified number of seconds of keyboard inactivity. set to zero to
#: never stop blinking.

#: }}}

#: scrollback {{{

# scrollback_lines 2000

#: number of lines of history to keep in memory for scrolling back.
#: memory is allocated on demand. negative numbers are (effectively)
#: infinite scrollback. note that using very large scrollback is not
#: recommended as it can slow down resizing of the terminal and also
#: use large amounts of ram.

# scrollback_pager less --chop-long-lines --raw-control-chars +input_line_number

#: program with which to view scrollback in a new window. the
#: scrollback buffer is passed as stdin to this program. if you change
#: it, make sure the program you use can handle ansi escape sequences
#: for colors and text formatting. input_line_number in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen.

# scrollback_pager_history_size 0

#: separate scrollback history size, used only for browsing the
#: scrollback buffer (in mb). this separate buffer is not available
#: for interactive scrolling but will be piped to the pager program
#: when viewing scrollback buffer in a separate window. the current
#: implementation stores one character in 4 bytes, so approximatively
#: 2500 lines per megabyte at 100 chars per line. a value of zero or
#: less disables this feature. the maximum allowed size is 4gb.

# wheel_scroll_multiplier 5.0

#: modify the amount scrolled by the mouse wheel. note this is only
#: used for low precision scrolling devices, not for high precision
#: scrolling on platforms such as macos and wayland. use negative
#: numbers to change scroll direction.

# touch_scroll_multiplier 1.0

#: modify the amount scrolled by a touchpad. note this is only used
#: for high precision scrolling devices on platforms such as macos and
#: wayland. use negative numbers to change scroll direction.

#: }}}

#: mouse {{{

# url_color #0087bd
# url_style curly

#: the color and style for highlighting urls on mouse-over. url_style
#: can be one of: none, single, double, curly

# open_url_modifiers kitty_mod

#: the modifier keys to press when clicking with the mouse on urls to
#: open the url

# open_url_with default

#: the program with which to open urls that are clicked on. the
#: special value default means to use the operating system's default
#: url handler.

# copy_on_select no

#: copy to clipboard on select. with this enabled, simply selecting
#: text with the mouse will cause the text to be copied to clipboard.
#: useful on platforms such as macos that do not have the concept of
#: primary selections. note that this is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the clipboard.

# rectangle_select_modifiers ctrl+alt

#: the modifiers to use rectangular selection (i.e. to select text in
#: a rectangular block with the mouse)

# select_by_word_characters :@-./_~?&=%+#

#: characters considered part of a word when double clicking. in
#: addition to these characters any character that is marked as an
#: alpha-numeric character in the unicode database will be matched.

# click_interval -1.0

#: the interval between successive clicks to detect double/triple
#: clicks (in seconds). negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

# mouse_hide_wait 3.0

#: hide mouse cursor after the specified number of seconds of the
#: mouse not being used. set to zero to disable mouse cursor hiding.

# focus_follows_mouse no

#: set the active window to the window under the mouse when moving the
#: mouse around

#: }}}

#: performance tuning {{{

# repaint_delay 10

#: delay (in milliseconds) between screen updates. decreasing it,
#: increases frames-per-second (fps) at the cost of more cpu usage.
#: the default value yields ~100 fps which is more than sufficient for
#: most uses. note that to actually achieve 100 fps you have to either
#: set sync_to_monitor to no or use a monitor with a high refresh
#: rate.

# input_delay 3

#: delay (in milliseconds) before input from the program running in
#: the terminal is processed. note that decreasing it will increase
#: responsiveness, but also increase cpu usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

# sync_to_monitor yes

#: sync screen updates to the refresh rate of the monitor. this
#: prevents tearing (https://en.wikipedia.org/wiki/screen_tearing)
#: when scrolling. however, it limits the rendering speed to the
#: refresh rate of your monitor. with a very high speed mouse/high
#: keyboard repeat rate, you may notice some slight input latency. if
#: so, set this to no.

#: }}}

#: terminal bell {{{

# enable_audio_bell yes

#: enable/disable the audio bell. useful in environments that require
#: silence.

# visual_bell_duration 0.0

#: visual bell duration. flash the screen when a bell occurs for the
#: specified number of seconds. set to zero to disable.

# window_alert_on_bell yes

#: request window attention on bell. makes the dock icon bounce on
#: macos or the taskbar flash on linux.

# bell_on_tab yes

#: show a bell symbol on the tab if a bell occurs in one of the
#: windows in the tab and the window is not the currently focused
#: window

#: }}}

#: window layout {{{

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400

#: if enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. if disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. you can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

enabled_layouts fat, tall:bias=60, stack, grid

#: the enabled window layouts. a comma separated list of layout names.
#: the special value all means all layouts. the first listed layout
#: will be used as the startup layout. for a list of available
#: layouts, see the
#: https://sw.kovidgoyal.net/kitty/index.html#layouts.

# window_resize_step_cells 2
# window_resize_step_lines 2

#: the step size (in units of cell width/cell height) to use when
#: resizing windows. the cells value is used for horizontal resizing
#: and the lines value for vertical resizing.

# window_border_width 1.0

#: the width (in pts) of window borders. will be rounded to the
#: nearest number of pixels based on screen resolution. note that
#: borders are displayed only when more than one window is visible.
#: they are meant to separate multiple windows.

# draw_minimal_borders yes

#: draw only the minimum borders needed. this means that only the
#: minimum needed borders for inactive windows are drawn. that is only
#: the borders that separate the inactive window from a neighbor. note
#: that setting a non-zero window margin overrides this and causes all
#: borders to be drawn.

# window_margin_width 0.0

#: the window margin (in pts) (blank area outside the border)

# single_window_margin_width -1000.0

#: the window margin (in pts) to use when only a single window is
#: visible. negative values will cause the value of
#: window_margin_width to be used instead.

# window_padding_width 1.0

#: the window padding (in pts) (blank area between the text and the
#: window border)

active_border_color #268bd2

#: the color for the border of the active window

inactive_border_color #fdf6e3

#: the color for the border of inactive windows

# bell_border_color #ff5a00

#: the color for the border of inactive windows in which a bell has
#: occurred

# inactive_text_alpha 1.0

#: fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

# hide_window_decorations no

#: hide the window decorations (title-bar and window borders). whether
#: this works and exactly what effect it has depends on the window
#: manager/operating system.

#: }}}

#: tab bar {{{

# tab_bar_edge bottom

#: which edge to show the tab bar on, top or bottom

# tab_bar_margin_width 0.0

#: the margin to the left and right of the tab bar (in pts)

tab_bar_style separator

#: the tab bar style, can be one of: fade, separator or hidden. in the
#: fade style, each tab's edges fade into the background color, in the
#: separator style, tabs are separated by a configurable separator.

# tab_fade 0.25 0.5 0.75 1

#: control how each tab fades into the background when using fade for
#: the tab_bar_style. each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. you
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_separator " ┇"
tab_separator " || "

#: the separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

# tab_title_template {title}

#: a template to render the tab title. the default just renders the
#: title. if you wish to include the tab-index as well, use something
#: like: {index}: {title}. useful if you have shortcuts mapped for
#: goto_tab n.

# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

#: tab bar colors and styles

#: }}}

#: color scheme {{{

# foreground #dddddd
background #073642

#: the foreground and background colors

background_opacity         0.9
dynamic_background_opacity yes

#: the opacity of the background. a number between 0 and 1, where 1 is
#: opaque and 0 is fully transparent.  this will only work if
#: supported by the os (for instance, when using a compositor under
#: x11). note that it only sets the default background color's
#: opacity. this is so that things like the status bar in vim,
#: powerline prompts, etc. still look good.  but it means that if you
#: use a color theme with a background color in your editor, it will
#: not be rendered as transparent.  instead you should change the
#: default background color in your kitty config and not use a
#: background color in the editor color scheme. or use the escape
#: codes to set the terminals default colors in a shell script to
#: launch your editor.  be aware that using a value less than 1.0 is a
#: (possibly significant) performance hit.  if you want to dynamically
#: change transparency of windows set dynamic_background_opacity to
#: yes (this is off by default as it has a performance cost)

# dim_opacity 0.75

#: how much to dim text that has the dim/faint attribute set. one
#: means no dimming and zero means fully dimmed (i.e. invisible).

# selection_foreground #000000
# selection_background #fffacd

#: the foreground and background for text selected with the mouse


#: the 16 terminal colors. there are 8 basic colors, each color has a
#: dull and bright version. you can also set the remaining colors from
#: the 256 color table as color16 to color255.

# color0 #000000
# color8 #767676

#: black

# color1 #cc0403
# color9 #f2201f

#: red

# color2  #19cb00
# color10 #23fd00

#: green

# color3  #cecb00
# color11 #fffd00

#: yellow

# color4  #0d73cc
# color12 #1a8fff

#: blue

# color5  #cb1ed1
# color13 #fd28ff

#: magenta

# color6  #0dcdcd
# color14 #14ffff

#: cyan

# color7  #dddddd
# color15 #ffffff

#: white

#: }}}

#: advanced {{{

# shell .

#: the shell program to execute. the default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: note that on macos if you change this, you might need to add
#: --login to ensure that the shell starts in interactive mode and
#: reads its startup rc files.

editor nvim

#: the console editor to use when editing the kitty config file or
#: similar tasks. a value of . means to use the environment variable
#: editor. note that this environment variable has to be set not just
#: in your shell startup scripts but system-wide, otherwise kitty will
#: not see it.

# close_on_child_death no

#: close the window when the child process (shell) exits. if no (the
#: default), the terminal will remain open when the child exits as
#: long as there are still processes outputting to the terminal (for
#: example disowned or backgrounded processes). if yes, the window
#: will close as soon as the child process exits. note that setting it
#: to yes means that any background processes still using the terminal
#: can fail silently because their stdout/stderr/stdin no longer work.

# allow_remote_control no

#: allow other programs to control kitty. if you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc. note that this even works over ssh
#: connections.

# env 

#: specify environment variables to set in all child processes. note
#: that environment variables are expanded recursively, so if you
#: use::

#:     env myvar1=a
#:     env myvar2=${myvar1}/${home}/b

#: the value of myvar2 will be a/<path to home directory>/b.

# startup_session none

#: path to a session file to use for all kitty instances. can be
#: overridden by using the kitty --session command line option for
#: individual instances. see
#: https://sw.kovidgoyal.net/kitty/index.html#sessions in the kitty
#: documentation for details. note that relative paths are interpreted
#: with respect to the kitty config directory. environment variables
#: in the path are expanded.

# clipboard_control write-clipboard write-primary

#: allow programs running in kitty to read and write from the
#: clipboard. you can control exactly which actions are allowed. the
#: set of possible actions is: write-clipboard read-clipboard write-
#: primary read-primary the default is to allow writing to the
#: clipboard and primary selection. note that enabling the read
#: functionality is a security risk as it means that any program, even
#: one running on a remote server via ssh can read your clipboard.

# term xterm-kitty

#: the value of the term environment variable to set. changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on stack overflow
#: to change it. the term variable if used by various programs to get
#: information about the capabilities and behavior of the terminal. if
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work.

#: }}}

#: os specific tweaks {{{

# macos_titlebar_color system

#: change the color of the kitty window's titlebar on macos. a value
#: of system means to use the default system color, a value of
#: background means to use the background color of the currently
#: active window and finally you can use an arbitrary color, such as
#: #12af59 or red. warning: this option works by using a hack, as
#: there is no proper cocoa api for it. it sets the background color
#: of the entire window and makes the titlebar transparent. as such it
#: is incompatible with background_opacity. if you want to use both,
#: you are probably better off just hiding the titlebar with
#: hide_window_decorations.

# macos_option_as_alt yes

#: use the option key as an alt key. with this set to no, kitty will
#: use the macos native option+key = unicode character behavior. this
#: will break any alt+key keyboard shortcuts in your terminal
#: programs, but you can use the macos unicode input technique.

# macos_hide_from_tasks no

#: hide the kitty window from running tasks (option+tab) on macos.

# macos_quit_when_last_window_closed no

#: have kitty quit when all the top-level windows are closed. by
#: default, kitty will stay running, even with no open windows, as is
#: the expected behavior on macos.

# macos_window_resizable yes

#: disable this if you want kitty top-level (os) windows to not be
#: resizable on macos.

# macos_thicken_font 0

#: draw an extra border around the font with the given width, to
#: increase legibility at small font sizes. for example, a value of
#: 0.75 will result in rendering that looks similar to sub-pixel
#: antialiasing at common font sizes.

# macos_traditional_fullscreen no

#: use the traditional full-screen transition, that is faster, but
#: less pretty.

# macos_custom_beam_cursor no

#: enable/disable custom mouse cursor for macos that is easier to see
#: on both light and dark backgrounds. warning: this might make your
#: mouse cursor invisible on dual gpu machines.

#: }}}

#: keyboard shortcuts {{{

#: for a list of key names, see: glfw keys
#: <http://www.glfw.org/docs/latest/group__keys.html>. the name to use
#: is the part after the glfw_key_ prefix. for a list of modifier
#: names, see: glfw mods
#: <http://www.glfw.org/docs/latest/group__mods.html>

#: on linux you can also use xkb key names to bind keys that are not
#: supported by glfw. see xkb keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. the name to use is the part
#: after the xkb_key_ prefix. note that you should only use an xkb key
#: name for keys that are not present in the list of glfw keys.

#: finally, you can use raw system key codes to map keys. to see the
#: system key code for a key, start kitty with the kitty --debug-
#: keyboard option. then kitty will output some debug text for every
#: key event. in that text look for ``native_code`` the value of that
#: becomes the key name in the shortcut. for example:

#: .. code-block:: none

#:     on_key_input: glfw key: 65 native_code: 0x61 action: press mods: 0x0 text: 'a'

#: here, the key name for the a key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map ctrl+a to something.

#: you can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration.

#: you can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: for example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: you can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: for example::

#:     map ctrl+f>2 set_font_size 20

# kitty_mod ctrl+shift

#: the value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

# clear_all_shortcuts no

#: you can have kitty remove all shortcut definition seen up to this
#: point. useful, for instance, to remove the default shortcuts.

#: clipboard {{{

# map kitty_mod+c copy_to_clipboard

#: there is also a copy_or_interrupt action that can be optionally
#: mapped to ctrl+c. it will copy only if there is a selection and
#: send an interrupt otherwise.

# map kitty_mod+v  paste_from_clipboard
# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection
# map kitty_mod+o  pass_selection_to_program

#: you can also pass the contents of the current selection to any
#: program using pass_selection_to_program. by default, the system's
#: open program is used, but you can specify your own, for example::

#:     map kitty_mod+o pass_selection_to_program firefox

#: you can pass the current selection to a terminal program running in
#: a new kitty window, by using the @selection placeholder::

#:     map kitty_mod+y new_window less @selection

#: }}}

#: scrolling {{{

# map kitty_mod+up        scroll_line_up
# map kitty_mod+k         scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+j         scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map kitty_mod+home      scroll_home
# map kitty_mod+end       scroll_end
# map kitty_mod+h         show_scrollback

#: you can pipe the contents of the current screen + history buffer as
#: stdin to an arbitrary program using the ``pipe`` function. for
#: example, the following opens the scrollback buffer in less in an
#: overlay window::

#:     map f1 pipe @ansi overlay less +g -r

#: for more details on piping screen and buffer contents to external
#: programs, see pipe.

#: }}}

#: window management {{{

map kitty_mod+enter new_window_with_cwd

#: you can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      new_window mutt

#: you can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    new_window_with_cwd

#: you can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: any programs running in that window will be allowed to control
#: kitty. for example::

#:     map ctrl+enter new_window @ some_program

# map kitty_mod+n new_os_window
# map kitty_mod+w close_window
# map kitty_mod+] next_window
# map kitty_mod+[ previous_window
# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window
# map kitty_mod+1 first_window
# map kitty_mod+2 second_window
# map kitty_mod+3 third_window
# map kitty_mod+4 fourth_window
# map kitty_mod+5 fifth_window
# map kitty_mod+6 sixth_window
# map kitty_mod+7 seventh_window
# map kitty_mod+8 eighth_window
# map kitty_mod+9 ninth_window
# map kitty_mod+0 tenth_window
#: }}}

#: tab management {{{

map kitty_mod+l next_tab
map kitty_mod+h  previous_tab
# map kitty_mod+t     new_tab
# map kitty_mod+q     close_tab
# map kitty_mod+.     move_tab_forward
# map kitty_mod+,     move_tab_backward
# map kitty_mod+alt+t set_tab_title

#: you can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: layout management {{{

map kitty_mod+;>; next_layout

#: you can also create shortcuts to switch to specific layouts::

map kitty_mod+;>l goto_layout fat
map kitty_mod+;>s goto_layout stack

#: similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout
#: }}}

#: font sizes {{{

#: you can change the font size for all top-level kitty os windows at
#: a time or only the current one.

# map kitty_mod+equal     change_font_size all +2.0
# map kitty_mod+minus     change_font_size all -2.0
# map kitty_mod+backspace change_font_size all 0

#: to setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: to setup shortcuts to change only the current os window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: select and act on visible text {{{

#: use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

# map kitty_mod+e kitten hints

#: open a currently visible url using the keyboard. the program used
#: to open the url is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

#: select a path/filename and insert it into the terminal. useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

# map kitty_mod+p>shift+f kitten hints --type path

#: select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: select a line of text and insert it into the terminal. use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

#: select something that looks like a hash and insert it into the
#: terminal. useful with git, which uses sha1 hashes to identify
#: commits


#: the hints kitten has many more modes of operation that you can map
#: to different shortcuts. for a full description see kittens/hints.
#: }}}

#: miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+u      kitten unicode_input
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
# map kitty_mod+delete clear_terminal reset active

#: you can create shortcuts to clear/reset the terminal. for example::

#:     # reset the terminal
#:     map kitty_mod+f9 clear_terminal reset active
#:     # clear the terminal screen by erasing all contents
#:     map kitty_mod+f10 clear_terminal clear active
#:     # clear the terminal scrollback by erasing it
#:     map kitty_mod+f11 clear_terminal scrollback active
#:     # scroll the contents of the screen into the scrollback
#:     map kitty_mod+f12 clear_terminal scroll active

#: if you want to operate on all windows instead of just the current
#: one, use all instead of :italic`active`.

#: it is also possible to remap ctrl+l to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen::

#:     map ctrl+l combine : clear_terminal scroll active : send_text normal,application


#: you can tell kitty to send arbitrary (utf-8) encoded text to the
#: client program when pressing specified shortcut keys. for example::

#:     map ctrl+alt+a send_text all special text

#: this will send "special text" when you press the ctrl+alt+a key
#: combination.  the text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as utf-8 text). the first argument to send_text is the
#: keyboard modes in which to activate the shortcut. the possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  the special keyword all means all modes. the
#: modes normal and application refer to the decckm cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the home key)::

#:     map ctrl+alt+a send_text normal word\x1b[h
#:     map ctrl+alt+a send_text application word\x1boh

#: }}}

# }}}
