"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"
"	Table of content
"	0. Plugins
"	1. General
"	2. Colors, Fonts
"	3. Tabs / Windows / Buffers
"	4. VIM UI
"	5. Text formating
"	6. Editing mappings
"	7. Status and tab line
"	8. Misc
"
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	0. Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Vundle
" https://github.com/VundleVim/Vundle.vim

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Plugin 'rust-lang/rust.vim' 
" todo solarized colors, fzf, tree, js?
Plugin 'iCyMind/NeoSolarized'
Plugin 'preservim/nerdtree'


call vundle#end()            " required
filetype plugin indent on    " required


"""""""""""""""""""""""""""""""""
"	0.1 NERDTree
"""""""""""""""""""""""""""""""""

" Toggle NERDTree
map <F3> :NERDTreeToggle<CR>

" Open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" NERTree on the right
let g:NERDTreeWinPos = "right"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	1. General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set line number
set number
set relativenumber
set hidden

" Sets how many lines of history VIM has to remember
set history=500

set nocompatible              " be iMproved, required

" Enable filetype plugins
" filetype indent on
filetype off                  " required for vundle

" Set to auto read when a file is changed from the outside
set autoread

" Map space to leader
let mapleader = " "

" Fast saving
nmap <leader>w :w!<cr>

" Global copy/paste maps
nnoremap <leader>y "+yy
nnoremap <leader>p "+p

" :W sudo saves the file 
" (useful for handling the permission-denied error)
" command W w !sudo tee % > /dev/null

" Close vim
nnoremap <leader>q :qa<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	2. Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set guicolors
set termguicolors

" Enable syntax highlighting
syntax enable 

" Enable 256 colors 
set t_Co=256

set background=dark

" Colorscheme
let g:neosolarized_contrast = "high"
let g:neosolarized_visibility = "high"
colorscheme NeoSolarized

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	3. Tabs / Windows / Buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Move between tabs
map [t gT
map ]t gt

" Move between windows
map [w <C-W>w
map ]w <C-W>W

" Move between buffers
map [b :bprevious<cr>
map ]b :bnext<cr>

" todo
" close buffer
" close all without active
"
" Close the current buffer
" map <leader>bc :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
" map <leader>bd :bufdo bd<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 
map <leader>t<leader> :tabnext 

" Let 'tl' toggle between this and the last accessed tab
" todo
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers 
set switchbuf=useopen,usetab,newtab

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	4. VIM UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Turn on the Wild menu
set wildmenu

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
set foldcolumn=1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	5. Text formating
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=0 noexpandtab

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set nowrap "Wrap lines


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	6. Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Auto closing
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap (; ();<ESC>o
inoremap [ []<left>
inoremap { {}<left>
" todo
" open brakets in new line
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

" Fast closing semicolon
inoremap ; <C-o>:call setline('.', getline('.') . ';')<CR>

" H to move to the first character in a line
noremap H ^
" L to move to the last character in a line
noremap L g_


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	7. Status and tab line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Always show the tab line
set stal=2

" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	8. Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Toggle paste mode on and off
set pastetoggle=<F2>

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

