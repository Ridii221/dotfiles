"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"
"	Table of content
"	0. Plugins
"	1. General
"	2. Colors, Fonts
"	3. Tabs / Windows / Buffers
"	4. VIM UI
"	5. Text formating
"	6. Movement mappings
"	7. Editing mappings
"	8. Status and tab line
"	9. Misc
"
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Map space to leader
let maplocalleader = " "
let mapleader = " "

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	0. Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" plug.vim
" https://github.com/junegunn/vim-plug

call plug#begin(stdpath('data') . '/plugged')

" Basic
Plug 'iCyMind/NeoSolarized'
Plug 'itchyny/lightline.vim'
Plug 'preservim/nerdtree'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" requires 
" https://github.com/sharkdp/bat
" https://github.com/BurntSushi/ripgrep
Plug 'junegunn/fzf.vim'

" Autocompletion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Run after installation
" :CocInstall coc-tsserver coc-json

" JavaScript
Plug 'leafgarland/typescript-vim'
Plug 'ianks/vim-tsx'
" LaTeX
" Plug 'lervag/vimtex'
"
" todo
" https://github.com/tpope/vim-surround
" https://github.com/terryma/vim-multiple-cursors
" https://github.com/romainl/vim-qf

call plug#end()            " required
filetype plugin indent on    " required


"""""""""""""""""""""""""""""""""
"	0.1 NERDTree
"""""""""""""""""""""""""""""""""

" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>

" Find current file in tree
nnoremap <leader>ff :NERDTreeFind %<CR>

" NERDTree ui"
let g:NERDTreeMinimalUI = 1

" Open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" NERTree on the right
let g:NERDTreeWinPos = "left"

" Open and close node with l and h"
let g:NERDTreeMapActivateNode = "l"
let g:NERDTreeMapOpenRecursively = "L"
let g:NERDTreeMapCloseDir = "h"
let g:NERDTreeMapCloseChildren = "H"

let g:NERDTreeMapToggleHidden = "."

"""""""""""""""""""""""""""""""""
"	0.2 CoC
"""""""""""""""""""""""""""""""""
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by

let g:coc_disable_startup_warning = 1


" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	1. General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" mouse
set mouse=a

" Don't pass mesages to |ins-completion-menu|.
set shortmess+=c

" Set line number
set number
set relativenumber
set hidden
set signcolumn=auto

" Sets how many lines of history VIM has to remember
set history=500

set updatetime=300

set nocompatible              " be iMproved, required

" Enable filetype plugins
" filetype indent on
filetype off                  " required for vundle

" Set to auto read when a file is changed from the outside
set autoread

" Fast saving
nmap <leader>s :w!<cr>

" Global copy/paste maps
nnoremap <leader>y "+yy
nnoremap <leader>p "+p

" :W sudo saves the file 
" (useful for handling the permission-denied error)
" command W w !sudo tee % > /dev/null

" Close 
nnoremap <leader>q :q<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	2. Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set guicolors
set termguicolors

" Enable syntax highlighting
syntax enable 

" Enable 256 colors 
set t_Co=256

set background=dark

" Colorscheme
let g:neosolarized_contrast = "high"
let g:neosolarized_visibility = "high"
colorscheme NeoSolarized

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	3. Tabs / Windows / Buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Move between tabs
map [t gT
map ]t gt

" Move between windows
map [w <C-W>W
map ]w <C-W>w

" Move between buffers
map [b :bprevious<cr>
map ]b :bnext<cr>


"
" Tabs
"
" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 

" Open all buffers in tabs
map <leader>ta :tab sball<cr>

" toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader><TAB> :exe "tabn ".g:lasttab<CR>



au TabLeave * let g:lasttab = tabpagenr()

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

"
" Windows
"
nnoremap <leader>wt <C-W>T
nnoremap <leader>wo <C-W>o
nnoremap <leader>wh <C-W>_
nnoremap <leader>wl <C-W>\|
nnoremap <leader>ww <C-W>=



"
" Buffers
"
" todo
" close buffer
" close all without active
"
" Close the current buffer
" map <leader>bc :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
" map <leader>bd :bufdo bd<cr>


" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers 
set switchbuf=useopen,usetab,newtab

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	4. VIM UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Turn on the Wild menu
set wildmenu

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
set foldcolumn=1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	5. Text formating
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 1 tab == 4 spaces
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set nowrap "Wrap lines

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	6. Movement mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""
"	From CoC plugin
"""""""""""""""""""""""""""""""""
"
" GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)
"
"""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""
"	Vim default refrence
"""""""""""""""""""""""""""""""""
"
" :he jump-motions
"
"""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	7. Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Auto closing
" inoremap ' ''<left>
" inoremap ( ()<left>
" inoremap (; ();<ESC>o
" inoremap [ []<left>
" inoremap { {}<left>
" todo
" open brakets in new line
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

" Fast closing semicolon
" inoremap ; <C-o>:call setline('.', getline('.') . ';')<CR>

" H to move to the first character in a line
noremap H ^
" L to move to the last character in a line
noremap L g_


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	8. Status and tab line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Always show the tab line
set stal=2

" Always show the status line
set laststatus=2

set noshowmode

" Format the status line
" set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

"""""""""""""""""""""""""""""""""
" 	From lightline
"""""""""""""""""""""""""""""""""

let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'cocstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \   'cocstatus': 'coc#status'
      \ },
      \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"	9. Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""
"	9.1 Clipboard
"""""""""""""""""""""""""""""""""

set clipboard+=unnamedplus

"""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""

" Toggle paste mode on and off
set pastetoggle=<F2>

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><ESC> :noh<cr>

